var search_data = {"index":{"searchIndex":["micronaut","behaviour","configuration","example","expectations","expectationnotmeterror","invalidmatchererror","objectexpectations","formatters","baseformatter","basetextformatter","documentationformatter","progressformatter","kernelextensions","matchers","beclose","matchererror","operatormatcher","simplematcher","mocking","withabsolutelynothing","withmocha","withrr","raketask","runner","world","object","_setup_mocks()","_setup_mocks()","_teardown_mocks()","_teardown_mocks()","_verify_mocks()","_verify_mocks()","add_behaviour()","add_behaviour()","after()","after()","after_alls()","after_ancestors()","after_eachs()","afters()","alias_example_to()","alias_example_to()","ancestors()","apply_condition()","apply_exclusion_filters()","apply_inclusion_filters()","autorun()","autorun!()","backtrace_line()","be()","be_close()","before()","before()","before_all_ivars()","before_alls()","before_ancestors()","before_eachs()","befores()","behaviours_to_run()","blue()","bold()","change()","cleaned_from_backtrace?()","clear_generated_description()","close()","close()","color()","color_enabled=()","color_enabled?()","color_enabled?()","colorise()","configuration()","configuration()","configuration()","configure()","current_indentation()","describe()","describe()","described_behaviour_chain()","describes()","description()","description()","description()","description()","dump_failures()","dump_failures()","dump_pending()","dump_pending()","dump_summary()","dump_summary()","eql()","equal()","eval_after_alls()","eval_after_eachs()","eval_before_alls()","eval_before_eachs()","example()","example_finished()","example_finished()","example_finished()","examples()","examples_to_run()","exclusion_filter()","execution_result()","explanation()","extend()","fail_with_message()","failed_examples()","failure_message()","failure_message()","failure_output()","file_path()","file_path()","filter()","filter_behaviours()","filter_run()","find()","find_before_or_after()","find_modules()","format_backtrace()","format_caller()","formatter()","formatter()","formatter=()","generated_description()","green()","grey()","have()","have_at_least()","have_at_most()","have_exactly()","include()","include()","inherited()","inspect()","installed_at_exit?()","magenta()","match()","matches?()","matches?()","metadata()","mock_with()","name()","negative_failure_message()","new()","new()","new()","new()","new()","new()","new()","new()","new()","output()","output()","output_for()","output_for()","passed_output()","pending_examples()","pending_output()","profile_examples?()","puts()","raise_error()","read_failed_line()","record_results()","red()","require_all_behaviours()","respond_to()","run()","run()","run()","run_after_each()","run_all_when_everything_filtered?()","run_before_each()","run_examples()","run_failed()","run_finished()","run_passed()","run_pending()","run_started()","satisfy()","set_it_up()","should()","should_not()","simple_matcher()","start()","start_dump()","start_dump()","throw_symbol()","to_s()","to_s()","total_examples_to_run()","trace()","trace()","trace?()","trace_override_flag()","white()","world()","wrap_expectation()","yellow()","license","readme.markdown","micronaut.rb","behaviour.rb","configuration.rb","example.rb","expectations.rb","object.rb","handler.rb","wrap_expectation.rb","formatters.rb","base_formatter.rb","base_text_formatter.rb","documentation_formatter.rb","progress_formatter.rb","kernel_extensions.rb","matchers.rb","be.rb","be_close.rb","change.rb","eql.rb","equal.rb","generated_descriptions.rb","has.rb","have.rb","include.rb","match.rb","method_missing.rb","operator_matcher.rb","raise_error.rb","respond_to.rb","satisfy.rb","simple_matcher.rb","throw_symbol.rb","with_absolutely_nothing.rb","with_mocha.rb","with_rr.rb","rake_task.rb","runner.rb","world.rb"],"info":[["Micronaut","lib/micronaut.rb","classes/Micronaut.html"," < ","",1],["Behaviour","Micronaut","classes/Micronaut/Behaviour.html"," < Object","",1],["Configuration","Micronaut","classes/Micronaut/Configuration.html"," < Object","",1],["Example","Micronaut","classes/Micronaut/Example.html"," < Object","",1],["Expectations","Micronaut","classes/Micronaut/Expectations.html"," < ","Micronaut::Expectations lets you set expectations on your objects. result.should == 37 team.should have(11).players_on_the_field",1],["ExpectationNotMetError","Micronaut::Expectations","classes/Micronaut/Expectations/ExpectationNotMetError.html"," < ::StandardError","",1],["InvalidMatcherError","Micronaut::Expectations","classes/Micronaut/Expectations/InvalidMatcherError.html"," < ArgumentError","",1],["ObjectExpectations","Micronaut::Expectations","classes/Micronaut/Expectations/ObjectExpectations.html"," < ","",1],["Formatters","Micronaut","classes/Micronaut/Formatters.html"," < ","",1],["BaseFormatter","Micronaut::Formatters","classes/Micronaut/Formatters/BaseFormatter.html"," < Object","",1],["BaseTextFormatter","Micronaut::Formatters","classes/Micronaut/Formatters/BaseTextFormatter.html"," < BaseFormatter","",1],["DocumentationFormatter","Micronaut::Formatters","classes/Micronaut/Formatters/DocumentationFormatter.html"," < BaseTextFormatter","",1],["ProgressFormatter","Micronaut::Formatters","classes/Micronaut/Formatters/ProgressFormatter.html"," < BaseTextFormatter","",1],["KernelExtensions","Micronaut","classes/Micronaut/KernelExtensions.html"," < ","",1],["Matchers","Micronaut","classes/Micronaut/Matchers.html"," < ","We ship (courtesy of RSpec and Micronaut) with a number of useful Expression Matchers. An Expression",1],["BeClose","Micronaut::Matchers","classes/Micronaut/Matchers/BeClose.html"," < Object","",1],["MatcherError","Micronaut::Matchers","classes/Micronaut/Matchers/MatcherError.html"," < StandardError","",1],["OperatorMatcher","Micronaut::Matchers","classes/Micronaut/Matchers/OperatorMatcher.html"," < Object","",1],["SimpleMatcher","Micronaut::Matchers","classes/Micronaut/Matchers/SimpleMatcher.html"," < Object","",1],["Mocking","Micronaut","classes/Micronaut/Mocking.html"," < ","",1],["WithAbsolutelyNothing","Micronaut::Mocking","classes/Micronaut/Mocking/WithAbsolutelyNothing.html"," < ","",1],["WithMocha","Micronaut::Mocking","classes/Micronaut/Mocking/WithMocha.html"," < ","",1],["WithRR","Micronaut::Mocking","classes/Micronaut/Mocking/WithRR.html"," < ","",1],["RakeTask","Micronaut","classes/Micronaut/RakeTask.html"," < ::Rake::TaskLib","",1],["Runner","Micronaut","classes/Micronaut/Runner.html"," < Object","",1],["World","Micronaut","classes/Micronaut/World.html"," < Object","",1],["Object","lib/micronaut/expectations/extensions/object.rb","classes/Object.html"," < Object","",1],["_setup_mocks","Micronaut::Mocking::WithAbsolutelyNothing","classes/Micronaut/Mocking/WithAbsolutelyNothing.html#M000155","()","",2],["_setup_mocks","Micronaut::Mocking::WithRR","classes/Micronaut/Mocking/WithRR.html#M000159","()","",2],["_teardown_mocks","Micronaut::Mocking::WithAbsolutelyNothing","classes/Micronaut/Mocking/WithAbsolutelyNothing.html#M000157","()","",2],["_teardown_mocks","Micronaut::Mocking::WithRR","classes/Micronaut/Mocking/WithRR.html#M000161","()","",2],["_verify_mocks","Micronaut::Mocking::WithAbsolutelyNothing","classes/Micronaut/Mocking/WithAbsolutelyNothing.html#M000156","()","",2],["_verify_mocks","Micronaut::Mocking::WithRR","classes/Micronaut/Mocking/WithRR.html#M000160","()","",2],["add_behaviour","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000083","(behaviour)","This method is invoked at the beginning of the execution of each behaviour. +behaviour+ is the behaviour.",2],["add_behaviour","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000108","(behaviour)","",2],["after","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000011","(type=:each, &block)","",2],["after","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000034","(each_or_all=:each, options={}, &block)","",2],["after_alls","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000010","()","",2],["after_ancestors","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000044","()","",2],["after_eachs","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000009","()","",2],["afters","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000008","()","",2],["alias_example_to","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000015","(new_alias, extra_options={})","",2],["alias_example_to","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000004","(new_name, extra_options={})","E.g. alias_example_to :crazy_slow, :speed => 'crazy_slow' defines crazy_slow as an example variant that",2],["ancestors","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000042","(superclass_last=false)","",2],["apply_condition","Micronaut::World","classes/Micronaut/World.html#M000183","(filter_on, filter, metadata)","",2],["apply_exclusion_filters","Micronaut::World","classes/Micronaut/World.html#M000182","(collection, conditions={})","",2],["apply_inclusion_filters","Micronaut::World","classes/Micronaut/World.html#M000181","(collection, conditions={})","",2],["autorun","Micronaut::Runner","classes/Micronaut/Runner.html#M000163","()","",2],["autorun!","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000016","()","",2],["backtrace_line","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000090","(line)","",2],["be","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000125","(*args)","Given true, false, or nil, will pass if actual value is true, false or nil (respectively). Given no args",2],["be_close","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000124","(expected, delta)","Passes if actual == expected +/- delta == Example result.should be_close(3.0, 0.5) ",2],["before","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000007","(type=:each, &block)","",2],["before","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000033","(each_or_all=:each, options={}, &block)","",2],["before_all_ivars","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000045","()","",2],["before_alls","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000006","()","",2],["before_ancestors","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000043","()","",2],["before_eachs","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000005","()","",2],["befores","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000002","()","",2],["behaviours_to_run","Micronaut::World","classes/Micronaut/World.html#M000174","()","",2],["blue","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000105","(text)","",2],["bold","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000099","(text)","",2],["change","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000127","(receiver=nil, message=nil, &block)","Allows you to specify that a Proc will cause some value to change. == Examples lambda { team.add_player(player)",2],["cleaned_from_backtrace?","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000012","(line)","",2],["clear_generated_description","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000129","()","",2],["close","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000088","()","This method is invoked at the very end. Allows the formatter to clean up, like closing open streams.",2],["close","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000097","()","",2],["color","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000098","(text, color_code)","",2],["color_enabled=","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000017","(on_or_off)","Turn ANSI on with 'true', or off with 'false' ",2],["color_enabled?","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000018","()","Output with ANSI color enabled? Defaults to false ",2],["color_enabled?","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000078","()","",2],["colorise","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000092","(s, failure)","",2],["configuration","Micronaut","classes/Micronaut.html#M000175","()","",2],["configuration","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000073","()","",2],["configuration","Micronaut::Runner","classes/Micronaut/Runner.html#M000164","()","",2],["configure","Micronaut","classes/Micronaut.html#M000176","()","",2],["current_indentation","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000114","()","",2],["describe","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000041","(*args, &behaviour_block)","",2],["describe","Micronaut::KernelExtensions","classes/Micronaut/KernelExtensions.html#M000119","(*args, &behaviour_block)","",2],["described_behaviour_chain","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000115","()","",2],["describes","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000038","()","",2],["description","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000039","()","",2],["description","Micronaut::Matchers::BeClose","classes/Micronaut/Matchers/BeClose.html#M000123","()","",2],["description","Micronaut::Matchers::OperatorMatcher","classes/Micronaut/Matchers/OperatorMatcher.html#M000143","()","",2],["description","Micronaut::Matchers::SimpleMatcher","classes/Micronaut/Matchers/SimpleMatcher.html#M000149","()","",2],["dump_failures","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000085","()","Dumps detailed information about each example failure. ",2],["dump_failures","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000091","()","",2],["dump_pending","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000087","()","This gets invoked after the summary if option is set to do so. ",2],["dump_pending","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000096","()","",2],["dump_summary","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000086","()","This method is invoked after the dumping of examples and failures. ",2],["dump_summary","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000093","()","",2],["eql","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000126","(expected)","Passes if actual and expected are of equal value, but not necessarily the same object. See http://www.ruby-doc.org/core/classes/Object.html#M001057",2],["equal","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000128","(expected)","Passes if given and expected are the same object (object identity). See http://www.ruby-doc.org/core/classes/Object.html#M001057",2],["eval_after_alls","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000048","(running_behaviour)","",2],["eval_after_eachs","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000049","(running_behaviour)","",2],["eval_before_alls","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000046","(running_behaviour)","",2],["eval_before_eachs","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000047","(running_behaviour)","",2],["example","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000014","(desc=nil, options={}, &block)","",2],["example_finished","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000082","(example)","",2],["example_finished","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000110","(example)","",2],["example_finished","Micronaut::Formatters::ProgressFormatter","classes/Micronaut/Formatters/ProgressFormatter.html#M000117","(example)","",2],["examples","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000025","()","",2],["examples_to_run","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000026","()","",2],["exclusion_filter","Micronaut::World","classes/Micronaut/World.html#M000173","()","",2],["execution_result","Micronaut::Example","classes/Micronaut/Example.html#M000054","()","",2],["explanation","Micronaut::Matchers::SimpleMatcher","classes/Micronaut/Matchers/SimpleMatcher.html#M000152","()","",2],["extend","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000031","(mod, options={})","",2],["fail_with_message","Micronaut::Matchers::OperatorMatcher","classes/Micronaut/Matchers/OperatorMatcher.html#M000142","(message)","",2],["failed_examples","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000080","()","",2],["failure_message","Micronaut::Matchers::BeClose","classes/Micronaut/Matchers/BeClose.html#M000122","()","",2],["failure_message","Micronaut::Matchers::SimpleMatcher","classes/Micronaut/Matchers/SimpleMatcher.html#M000150","()","",2],["failure_output","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000111","(example, exception)","",2],["file_path","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000040","()","",2],["file_path","Micronaut::Example","classes/Micronaut/Example.html#M000055","()","",2],["filter","Micronaut::World","classes/Micronaut/World.html#M000172","()","",2],["filter_behaviours","Micronaut::World","classes/Micronaut/World.html#M000179","()","",2],["filter_run","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000019","(options={})","",2],["find","Micronaut::World","classes/Micronaut/World.html#M000180","(collection, type_of_filter=:positive, conditions={})","",2],["find_before_or_after","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000035","(desired_before_or_after, desired_each_or_all, group)","",2],["find_modules","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000032","(group)","",2],["format_backtrace","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000089","(backtrace, example)","",2],["format_caller","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000095","(caller_info)","def textmate_link_backtrace(path) file, line = path.split(':') \"txmt://open/?url=file://#{File.expand_path(file)}&line=#{line}\"",2],["formatter","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000022","()","The formatter all output should use.  Defaults to the progress formatter ",2],["formatter","Micronaut::Runner","classes/Micronaut/Runner.html#M000165","()","",2],["formatter=","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000021","(formatter_to_use)","",2],["generated_description","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000130","()","",2],["green","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000101","(text)","",2],["grey","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000106","(text)","",2],["have","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000135","(n)","Passes if receiver is a collection with the submitted number of items OR if the receiver OWNS a collection",2],["have_at_least","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000137","(n)","Exactly like have() with >=. == Warning +should_not+ +have_at_least+ is not supported ",2],["have_at_most","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000138","(n)","Exactly like have() with <=. == Warning +should_not+ +have_at_most+ is not supported ",2],["have_exactly","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000136","(n)","Alias for #have",2],["include","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000030","(mod, options={})","",2],["include","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000134","(*expected)","Passes if actual includes expected. This works for collections and Strings. You can also pass in multiple",2],["inherited","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000000","(klass)","",2],["inspect","Micronaut::Example","classes/Micronaut/Example.html#M000066","()","",2],["installed_at_exit?","Micronaut::Runner","classes/Micronaut/Runner.html#M000162","()","",2],["magenta","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000103","(text)","",2],["match","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000139","(regexp)","Given a Regexp, passes if actual =~ regexp == Examples email.should match(/^([^\\s]+)((?:[-a-z0-9]+\\.)+[a-z]{2,})$/i)",2],["matches?","Micronaut::Matchers::BeClose","classes/Micronaut/Matchers/BeClose.html#M000121","(actual)","",2],["matches?","Micronaut::Matchers::SimpleMatcher","classes/Micronaut/Matchers/SimpleMatcher.html#M000148","(given)","",2],["metadata","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000036","()","",2],["mock_with","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000013","(make_a_mockery_with=nil)","",2],["name","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000037","(friendly=true)","",2],["negative_failure_message","Micronaut::Matchers::SimpleMatcher","classes/Micronaut/Matchers/SimpleMatcher.html#M000151","()","",2],["new","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000003","()","",2],["new","Micronaut::Example","classes/Micronaut/Example.html#M000052","(behaviour, desc, options, example_block=nil)","",2],["new","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000072","()","",2],["new","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000107","()","",2],["new","Micronaut::Matchers::BeClose","classes/Micronaut/Matchers/BeClose.html#M000120","(expected, delta)","",2],["new","Micronaut::Matchers::OperatorMatcher","classes/Micronaut/Matchers/OperatorMatcher.html#M000141","(actual)","",2],["new","Micronaut::Matchers::SimpleMatcher","classes/Micronaut/Matchers/SimpleMatcher.html#M000147","(description, &match_block)","",2],["new","Micronaut::RakeTask","classes/Micronaut/RakeTask.html#M000167","(*args)","",2],["new","Micronaut::World","classes/Micronaut/World.html#M000171","()","",2],["output","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000023","()","Where does output go? For now $stdout ",2],["output","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000074","()","",2],["output_for","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000109","(example)","",2],["output_for","Micronaut::Formatters::ProgressFormatter","classes/Micronaut/Formatters/ProgressFormatter.html#M000116","(example)","",2],["passed_output","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000112","(example)","",2],["pending_examples","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000079","()","",2],["pending_output","Micronaut::Formatters::DocumentationFormatter","classes/Micronaut/Formatters/DocumentationFormatter.html#M000113","(example, message)","",2],["profile_examples?","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000077","()","",2],["puts","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000028","(msg)","",2],["raise_error","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000144","(error=Exception, message=nil, &block)","With no args, matches if any error is raised. With a named error, matches only if that specific error",2],["read_failed_line","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000094","(exception, example)","",2],["record_results","Micronaut::Example","classes/Micronaut/Example.html#M000053","(results={})","",2],["red","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000102","(text)","",2],["require_all_behaviours","Micronaut::Runner","classes/Micronaut/Runner.html#M000166","(files_from_args=[])","",2],["respond_to","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000145","(*names)","Matches if the target object responds to all of the names provided. Names can be Strings or Symbols.",2],["run","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000050","(reporter)","",2],["run","Micronaut::Example","classes/Micronaut/Example.html#M000065","(behaviour_instance)","",2],["run","Micronaut::Runner","classes/Micronaut/Runner.html#M000168","(args = [])","",2],["run_after_each","Micronaut::Example","classes/Micronaut/Example.html#M000064","()","",2],["run_all_when_everything_filtered?","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000020","()","",2],["run_before_each","Micronaut::Example","classes/Micronaut/Example.html#M000063","()","",2],["run_examples","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000051","(behaviour_instance, reporter)","Runs all examples, returning true only if all of them pass ",2],["run_failed","Micronaut::Example","classes/Micronaut/Example.html#M000061","(exception)","",2],["run_finished","Micronaut::Example","classes/Micronaut/Example.html#M000062","(status, results={})","",2],["run_passed","Micronaut::Example","classes/Micronaut/Example.html#M000059","()","",2],["run_pending","Micronaut::Example","classes/Micronaut/Example.html#M000060","(message='Not yet implemented')","",2],["run_started","Micronaut::Example","classes/Micronaut/Example.html#M000058","()","",2],["satisfy","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000146","(&block)","Passes if the submitted block returns true. Yields target to the block. Generally speaking, this should",2],["set_it_up","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000027","(*args)","",2],["should","Micronaut::Expectations::ObjectExpectations","classes/Micronaut/Expectations/ObjectExpectations.html#M000068","(matcher=nil, &block)","receiver.should(matcher) => Passes if matcher.matches?(receiver) receiver.should == expected #any value",2],["should_not","Micronaut::Expectations::ObjectExpectations","classes/Micronaut/Expectations/ObjectExpectations.html#M000069","(matcher=nil, &block)","receiver.should_not(matcher) => Passes unless matcher.matches?(receiver) receiver.should_not == expected",2],["simple_matcher","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000153","(description=nil, &match_block)","simple_matcher makes it easy for you to create your own custom matchers in just a few lines of code when",2],["start","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000081","(example_count)","This method is invoked before any examples are run, right after they have all been collected. This can",2],["start_dump","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000084","(duration)","This method is invoked after all of the examples have executed. The next method to be invoked after this",2],["start_dump","Micronaut::Formatters::ProgressFormatter","classes/Micronaut/Formatters/ProgressFormatter.html#M000118","(duration)","",2],["throw_symbol","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000154","(sym=nil)","Given no argument, matches if a proc throws any Symbol. Given a Symbol, matches if the given proc throws",2],["to_s","Micronaut::Behaviour","classes/Micronaut/Behaviour.html#M000057","()","",2],["to_s","Micronaut::Example","classes/Micronaut/Example.html#M000067","()","",2],["total_examples_to_run","Micronaut::World","classes/Micronaut/World.html#M000178","()","",2],["trace","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000024","(override = false)","Output some string for debugging/tracing assistance if trace is enabled The trace string should be sent",2],["trace","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000075","(&blk)","",2],["trace?","Micronaut::Configuration","classes/Micronaut/Configuration.html#M000029","()","If true, Micronaut will provide detailed trace output of its self as it runs. Can be turned on at the",2],["trace_override_flag","Micronaut::Formatters::BaseFormatter","classes/Micronaut/Formatters/BaseFormatter.html#M000076","()","Allow setting trace at the behaviour level as well globally ",2],["white","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000100","(text)","",2],["world","Micronaut","classes/Micronaut.html#M000177","()","",2],["wrap_expectation","Micronaut::Matchers","classes/Micronaut/Matchers.html#M000070","(matcher, &block)","wraps an expectation in a block that will return true if the expectation passes and false if it fails",2],["yellow","Micronaut::Formatters::BaseTextFormatter","classes/Micronaut/Formatters/BaseTextFormatter.html#M000104","(text)","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2008 Chad Humphries  Permission is hereby granted, free of charge, to any person obtaining",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","# Micronaut  * [Codes - http://github.com/spicycode/micronaut](http://github.com/spicycode/micronaut)",3],["micronaut.rb","files/lib/micronaut_rb.html","files/lib/micronaut_rb.html","","",3],["behaviour.rb","files/lib/micronaut/behaviour_rb.html","files/lib/micronaut/behaviour_rb.html","","",3],["configuration.rb","files/lib/micronaut/configuration_rb.html","files/lib/micronaut/configuration_rb.html","","",3],["example.rb","files/lib/micronaut/example_rb.html","files/lib/micronaut/example_rb.html","","",3],["expectations.rb","files/lib/micronaut/expectations_rb.html","files/lib/micronaut/expectations_rb.html","","",3],["object.rb","files/lib/micronaut/expectations/extensions/object_rb.html","files/lib/micronaut/expectations/extensions/object_rb.html","","",3],["handler.rb","files/lib/micronaut/expectations/handler_rb.html","files/lib/micronaut/expectations/handler_rb.html","","",3],["wrap_expectation.rb","files/lib/micronaut/expectations/wrap_expectation_rb.html","files/lib/micronaut/expectations/wrap_expectation_rb.html","","",3],["formatters.rb","files/lib/micronaut/formatters_rb.html","files/lib/micronaut/formatters_rb.html","","",3],["base_formatter.rb","files/lib/micronaut/formatters/base_formatter_rb.html","files/lib/micronaut/formatters/base_formatter_rb.html","","",3],["base_text_formatter.rb","files/lib/micronaut/formatters/base_text_formatter_rb.html","files/lib/micronaut/formatters/base_text_formatter_rb.html","","",3],["documentation_formatter.rb","files/lib/micronaut/formatters/documentation_formatter_rb.html","files/lib/micronaut/formatters/documentation_formatter_rb.html","","",3],["progress_formatter.rb","files/lib/micronaut/formatters/progress_formatter_rb.html","files/lib/micronaut/formatters/progress_formatter_rb.html","","",3],["kernel_extensions.rb","files/lib/micronaut/kernel_extensions_rb.html","files/lib/micronaut/kernel_extensions_rb.html","","",3],["matchers.rb","files/lib/micronaut/matchers_rb.html","files/lib/micronaut/matchers_rb.html","","",3],["be.rb","files/lib/micronaut/matchers/be_rb.html","files/lib/micronaut/matchers/be_rb.html","","",3],["be_close.rb","files/lib/micronaut/matchers/be_close_rb.html","files/lib/micronaut/matchers/be_close_rb.html","","",3],["change.rb","files/lib/micronaut/matchers/change_rb.html","files/lib/micronaut/matchers/change_rb.html","","",3],["eql.rb","files/lib/micronaut/matchers/eql_rb.html","files/lib/micronaut/matchers/eql_rb.html","","",3],["equal.rb","files/lib/micronaut/matchers/equal_rb.html","files/lib/micronaut/matchers/equal_rb.html","","",3],["generated_descriptions.rb","files/lib/micronaut/matchers/generated_descriptions_rb.html","files/lib/micronaut/matchers/generated_descriptions_rb.html","","",3],["has.rb","files/lib/micronaut/matchers/has_rb.html","files/lib/micronaut/matchers/has_rb.html","","",3],["have.rb","files/lib/micronaut/matchers/have_rb.html","files/lib/micronaut/matchers/have_rb.html","","",3],["include.rb","files/lib/micronaut/matchers/include_rb.html","files/lib/micronaut/matchers/include_rb.html","","",3],["match.rb","files/lib/micronaut/matchers/match_rb.html","files/lib/micronaut/matchers/match_rb.html","","",3],["method_missing.rb","files/lib/micronaut/matchers/method_missing_rb.html","files/lib/micronaut/matchers/method_missing_rb.html","","",3],["operator_matcher.rb","files/lib/micronaut/matchers/operator_matcher_rb.html","files/lib/micronaut/matchers/operator_matcher_rb.html","","",3],["raise_error.rb","files/lib/micronaut/matchers/raise_error_rb.html","files/lib/micronaut/matchers/raise_error_rb.html","","",3],["respond_to.rb","files/lib/micronaut/matchers/respond_to_rb.html","files/lib/micronaut/matchers/respond_to_rb.html","","",3],["satisfy.rb","files/lib/micronaut/matchers/satisfy_rb.html","files/lib/micronaut/matchers/satisfy_rb.html","","",3],["simple_matcher.rb","files/lib/micronaut/matchers/simple_matcher_rb.html","files/lib/micronaut/matchers/simple_matcher_rb.html","","",3],["throw_symbol.rb","files/lib/micronaut/matchers/throw_symbol_rb.html","files/lib/micronaut/matchers/throw_symbol_rb.html","","",3],["with_absolutely_nothing.rb","files/lib/micronaut/mocking/with_absolutely_nothing_rb.html","files/lib/micronaut/mocking/with_absolutely_nothing_rb.html","","",3],["with_mocha.rb","files/lib/micronaut/mocking/with_mocha_rb.html","files/lib/micronaut/mocking/with_mocha_rb.html","","",3],["with_rr.rb","files/lib/micronaut/mocking/with_rr_rb.html","files/lib/micronaut/mocking/with_rr_rb.html","","",3],["rake_task.rb","files/lib/micronaut/rake_task_rb.html","files/lib/micronaut/rake_task_rb.html","","",3],["runner.rb","files/lib/micronaut/runner_rb.html","files/lib/micronaut/runner_rb.html","","",3],["world.rb","files/lib/micronaut/world_rb.html","files/lib/micronaut/world_rb.html","","",3]],"longSearchIndex":["lib/micronaut.rb","micronaut","micronaut","micronaut","micronaut","micronaut::expectations","micronaut::expectations","micronaut::expectations","micronaut","micronaut::formatters","micronaut::formatters","micronaut::formatters","micronaut::formatters","micronaut","micronaut","micronaut::matchers","micronaut::matchers","micronaut::matchers","micronaut::matchers","micronaut","micronaut::mocking","micronaut::mocking","micronaut::mocking","micronaut","micronaut","micronaut","lib/micronaut/expectations/extensions/object.rb","micronaut::mocking::withabsolutelynothing","micronaut::mocking::withrr","micronaut::mocking::withabsolutelynothing","micronaut::mocking::withrr","micronaut::mocking::withabsolutelynothing","micronaut::mocking::withrr","micronaut::formatters::baseformatter","micronaut::formatters::documentationformatter","micronaut::behaviour","micronaut::configuration","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::configuration","micronaut::behaviour","micronaut::world","micronaut::world","micronaut::world","micronaut::runner","micronaut::configuration","micronaut::formatters::baseformatter","micronaut::matchers","micronaut::matchers","micronaut::behaviour","micronaut::configuration","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::world","micronaut::formatters::basetextformatter","micronaut::formatters::basetextformatter","micronaut::matchers","micronaut::configuration","micronaut::matchers","micronaut::formatters::baseformatter","micronaut::formatters::basetextformatter","micronaut::formatters::basetextformatter","micronaut::configuration","micronaut::configuration","micronaut::formatters::baseformatter","micronaut::formatters::basetextformatter","micronaut","micronaut::formatters::baseformatter","micronaut::runner","micronaut","micronaut::formatters::documentationformatter","micronaut::behaviour","micronaut::kernelextensions","micronaut::formatters::documentationformatter","micronaut::behaviour","micronaut::behaviour","micronaut::matchers::beclose","micronaut::matchers::operatormatcher","micronaut::matchers::simplematcher","micronaut::formatters::baseformatter","micronaut::formatters::basetextformatter","micronaut::formatters::baseformatter","micronaut::formatters::basetextformatter","micronaut::formatters::baseformatter","micronaut::formatters::basetextformatter","micronaut::matchers","micronaut::matchers","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::behaviour","micronaut::formatters::baseformatter","micronaut::formatters::documentationformatter","micronaut::formatters::progressformatter","micronaut::behaviour","micronaut::behaviour","micronaut::world","micronaut::example","micronaut::matchers::simplematcher","micronaut::configuration","micronaut::matchers::operatormatcher","micronaut::formatters::baseformatter","micronaut::matchers::beclose","micronaut::matchers::simplematcher","micronaut::formatters::documentationformatter","micronaut::behaviour","micronaut::example","micronaut::world","micronaut::world","micronaut::configuration","micronaut::world","micronaut::configuration","micronaut::configuration","micronaut::formatters::baseformatter","micronaut::formatters::basetextformatter","micronaut::configuration","micronaut::runner","micronaut::configuration","micronaut::matchers","micronaut::formatters::basetextformatter","micronaut::formatters::basetextformatter","micronaut::matchers","micronaut::matchers","micronaut::matchers","micronaut::matchers","micronaut::configuration","micronaut::matchers","micronaut::behaviour","micronaut::example","micronaut::runner","micronaut::formatters::basetextformatter","micronaut::matchers","micronaut::matchers::beclose","micronaut::matchers::simplematcher","micronaut::behaviour","micronaut::configuration","micronaut::behaviour","micronaut::matchers::simplematcher","micronaut::configuration","micronaut::example","micronaut::formatters::baseformatter","micronaut::formatters::documentationformatter","micronaut::matchers::beclose","micronaut::matchers::operatormatcher","micronaut::matchers::simplematcher","micronaut::raketask","micronaut::world","micronaut::configuration","micronaut::formatters::baseformatter","micronaut::formatters::documentationformatter","micronaut::formatters::progressformatter","micronaut::formatters::documentationformatter","micronaut::formatters::baseformatter","micronaut::formatters::documentationformatter","micronaut::formatters::baseformatter","micronaut::configuration","micronaut::matchers","micronaut::formatters::baseformatter","micronaut::example","micronaut::formatters::basetextformatter","micronaut::runner","micronaut::matchers","micronaut::behaviour","micronaut::example","micronaut::runner","micronaut::example","micronaut::configuration","micronaut::example","micronaut::behaviour","micronaut::example","micronaut::example","micronaut::example","micronaut::example","micronaut::example","micronaut::matchers","micronaut::behaviour","micronaut::expectations::objectexpectations","micronaut::expectations::objectexpectations","micronaut::matchers","micronaut::formatters::baseformatter","micronaut::formatters::baseformatter","micronaut::formatters::progressformatter","micronaut::matchers","micronaut::behaviour","micronaut::example","micronaut::world","micronaut::configuration","micronaut::formatters::baseformatter","micronaut::configuration","micronaut::formatters::baseformatter","micronaut::formatters::basetextformatter","micronaut","micronaut::matchers","micronaut::formatters::basetextformatter","files/license.html","files/readme_markdown.html","files/lib/micronaut_rb.html","files/lib/micronaut/behaviour_rb.html","files/lib/micronaut/configuration_rb.html","files/lib/micronaut/example_rb.html","files/lib/micronaut/expectations_rb.html","files/lib/micronaut/expectations/extensions/object_rb.html","files/lib/micronaut/expectations/handler_rb.html","files/lib/micronaut/expectations/wrap_expectation_rb.html","files/lib/micronaut/formatters_rb.html","files/lib/micronaut/formatters/base_formatter_rb.html","files/lib/micronaut/formatters/base_text_formatter_rb.html","files/lib/micronaut/formatters/documentation_formatter_rb.html","files/lib/micronaut/formatters/progress_formatter_rb.html","files/lib/micronaut/kernel_extensions_rb.html","files/lib/micronaut/matchers_rb.html","files/lib/micronaut/matchers/be_rb.html","files/lib/micronaut/matchers/be_close_rb.html","files/lib/micronaut/matchers/change_rb.html","files/lib/micronaut/matchers/eql_rb.html","files/lib/micronaut/matchers/equal_rb.html","files/lib/micronaut/matchers/generated_descriptions_rb.html","files/lib/micronaut/matchers/has_rb.html","files/lib/micronaut/matchers/have_rb.html","files/lib/micronaut/matchers/include_rb.html","files/lib/micronaut/matchers/match_rb.html","files/lib/micronaut/matchers/method_missing_rb.html","files/lib/micronaut/matchers/operator_matcher_rb.html","files/lib/micronaut/matchers/raise_error_rb.html","files/lib/micronaut/matchers/respond_to_rb.html","files/lib/micronaut/matchers/satisfy_rb.html","files/lib/micronaut/matchers/simple_matcher_rb.html","files/lib/micronaut/matchers/throw_symbol_rb.html","files/lib/micronaut/mocking/with_absolutely_nothing_rb.html","files/lib/micronaut/mocking/with_mocha_rb.html","files/lib/micronaut/mocking/with_rr_rb.html","files/lib/micronaut/rake_task_rb.html","files/lib/micronaut/runner_rb.html","files/lib/micronaut/world_rb.html"]}}